import { Discussion } from '../engine/discussion.js';

export interface WriterConfig {
  language: string;
  timestamp: string;
  prompt: string;
  includeAcceptanceCriteria?: boolean;
}

export async function writeDiscussionMarkdown(
  discussion: Discussion,
  config: WriterConfig
): Promise<string> {
  const { language, timestamp, prompt } = config;
  const isPortuguese = language === 'pt' || language === 'pt-BR';

  const lines: string[] = [];

  // Header
  lines.push(isPortuguese ? '# Discussão da Mesa Redonda' : '# Roundtable Discussion');
  lines.push('');
  lines.push(`**${isPortuguese ? 'Data/Hora' : 'Timestamp'}:** ${timestamp}`);
  lines.push(`**${isPortuguese ? 'Prompt de Entrada' : 'Input Prompt'}:** ${prompt}`);
  lines.push(`**${isPortuguese ? 'Idioma' : 'Language'}:** ${language}`);
  lines.push('');

  // Participants
  lines.push(`## ${isPortuguese ? 'Participantes' : 'Participants'}`);
  lines.push('');
  lines.push(isPortuguese 
    ? '| Nome | Papel | Objetivos |'
    : '| Name | Role | Objectives |'
  );
  lines.push('|------|------|------------|');

  for (const participant of discussion.participants) {
    const objectives = participant.objectives.slice(0, 2).join('; ');
    lines.push(`| ${participant.name} | ${participant.role} | ${objectives} |`);
  }
  lines.push('');

  // Discussion Rounds
  lines.push(`## ${isPortuguese ? 'Transcrição da Discussão' : 'Discussion Transcript'}`);
  lines.push('');

  let currentRound = 0;
  for (const turn of discussion.rounds) {
    if (turn.round !== currentRound) {
      currentRound = turn.round;
      lines.push(`### ${isPortuguese ? 'Rodada' : 'Round'} ${currentRound}`);
      lines.push('');
    }

    lines.push(`**${turn.speaker}** (${turn.role}):`);
    lines.push('');
    lines.push(`> ${turn.content}`);
    lines.push('');
  }

  // Decisions
  lines.push(`## ${isPortuguese ? 'Decisões e Justificativas' : 'Decisions & Rationale'}`);
  lines.push('');

  for (let i = 0; i < discussion.decisions.length; i++) {
    lines.push(`${i + 1}. ${discussion.decisions[i]}`);
  }
  lines.push('');

  // Next Steps
  lines.push(`## ${isPortuguese ? 'Próximos Passos' : 'Next Steps'}`);
  lines.push('');

  for (let i = 0; i < discussion.nextSteps.length; i++) {
    lines.push(`${i + 1}. ${discussion.nextSteps[i]}`);
  }
  lines.push('');

  // Footer
  lines.push('---');
  lines.push('');
  lines.push(isPortuguese
    ? '*Documento gerado pelo PentaForge MCP Server*'
    : '*Document generated by PentaForge MCP Server*'
  );

  return lines.join('\n');
}